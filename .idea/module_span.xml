<?xml version="1.0" encoding="UTF-8"?>
<project name="module_span" default="compile.module.span">
  <dirname property="module.span.basedir" file="${ant.file.module_span}"/>
  
  <property name="module.jdk.home.span" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.span" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.span" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.span" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="span.output.dir" value="${module.span.basedir}/../target/classes"/>
  <property name="span.testoutput.dir" value="${module.span.basedir}/../target/test-classes"/>
  
  <path id="span.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="span.module.production.classpath">
    <path refid="${module.jdk.classpath.span}"/>
    <path refid="library.apfloat.classpath"/>
    <path refid="library.maven:_com.google.guava:guava:21.0.classpath"/>
    <path refid="library.maven:_com.google.collections:google-collections:1.0.classpath"/>
    <path refid="library.maven:_commons-cli:commons-cli:1.4.classpath"/>
    <path refid="library.maven:_commons-io:commons-io:2.5.classpath"/>
    <path refid="library.maven:_org.apache.commons:commons-lang3:3.0.classpath"/>
  </path>
  
  <path id="span.runtime.production.module.classpath">
    <pathelement location="${span.output.dir}"/>
    <path refid="library.apfloat.classpath"/>
    <path refid="library.maven:_com.google.guava:guava:21.0.classpath"/>
    <path refid="library.maven:_com.google.collections:google-collections:1.0.classpath"/>
    <path refid="library.maven:_commons-cli:commons-cli:1.4.classpath"/>
    <path refid="library.maven:_commons-io:commons-io:2.5.classpath"/>
    <path refid="library.maven:_org.apache.commons:commons-lang3:3.0.classpath"/>
  </path>
  
  <path id="span.module.classpath">
    <path refid="${module.jdk.classpath.span}"/>
    <pathelement location="${span.output.dir}"/>
    <path refid="library.apfloat.classpath"/>
    <path refid="library.maven:_com.google.guava:guava:21.0.classpath"/>
    <path refid="library.maven:_com.google.collections:google-collections:1.0.classpath"/>
    <path refid="library.maven:_commons-cli:commons-cli:1.4.classpath"/>
    <path refid="library.maven:_commons-io:commons-io:2.5.classpath"/>
    <path refid="library.maven:_org.apache.commons:commons-lang3:3.0.classpath"/>
    <path refid="library.maven:_junit:junit:4.12.classpath"/>
    <path refid="library.maven:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="span.runtime.module.classpath">
    <pathelement location="${span.testoutput.dir}"/>
    <pathelement location="${span.output.dir}"/>
    <path refid="library.apfloat.classpath"/>
    <path refid="library.maven:_com.google.guava:guava:21.0.classpath"/>
    <path refid="library.maven:_com.google.collections:google-collections:1.0.classpath"/>
    <path refid="library.maven:_commons-cli:commons-cli:1.4.classpath"/>
    <path refid="library.maven:_commons-io:commons-io:2.5.classpath"/>
    <path refid="library.maven:_org.apache.commons:commons-lang3:3.0.classpath"/>
    <path refid="library.maven:_junit:junit:4.12.classpath"/>
    <path refid="library.maven:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.span">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.span">
    <patternset refid="excluded.from.module.span"/>
  </patternset>
  
  <path id="span.module.sourcepath">
    <dirset dir="${module.span.basedir}/../../SPAN">
      <include name="src/main/resources"/>
      <include name="src/main/java"/>
    </dirset>
  </path>
  
  <path id="span.module.test.sourcepath">
    <dirset dir="${module.span.basedir}/../../SPAN">
      <include name="src/test/main"/>
      <include name="src/test/resources"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.span" depends="compile.module.span.production,compile.module.span.tests" description="Compile module span"/>
  
  <target name="compile.module.span.production" description="Compile module span; production classes">
    <mkdir dir="${span.output.dir}"/>
    <javac destdir="${span.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.span}/javac">
      <compilerarg line="${compiler.args.span}"/>
      <bootclasspath refid="span.module.bootclasspath"/>
      <classpath refid="span.module.production.classpath"/>
      <src refid="span.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.span"/>
    </javac>
    
    <copy todir="${span.output.dir}">
      <fileset dir="${module.span.basedir}/../src/main/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.span.basedir}/../src/main/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.span.tests" depends="compile.module.span.production" description="compile module span; test classes" unless="skip.tests">
    <mkdir dir="${span.testoutput.dir}"/>
    <javac destdir="${span.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.span}/javac">
      <compilerarg line="${compiler.args.span}"/>
      <bootclasspath refid="span.module.bootclasspath"/>
      <classpath refid="span.module.classpath"/>
      <src refid="span.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.span"/>
    </javac>
    
    <copy todir="${span.testoutput.dir}">
      <fileset dir="${module.span.basedir}/../src/test/main">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.span.basedir}/../src/test/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.span" description="cleanup module">
    <delete dir="${span.output.dir}"/>
    <delete dir="${span.testoutput.dir}"/>
  </target>
</project>