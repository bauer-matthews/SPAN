# NAME: DC-net Protocol
# PARAMETERS: 2 parties

#b0 = fst(dec(y1, tp))
#b1 = fst(snd(dec(y1, tp)))
#b2 = snd(snd(dec(y1, tp)))

.metadata

    version : 1.0;
    recipe depth : 10;
    xor : yes;
    equiv : yes;
    equiv method : otf;

.constants

.signature

    sort : Key, Bit, Message;
    subsort : Key, Bit < Message;

    # equational theory variables
    variables : k | Key;
    variables : mes, m1, m2 | Message;

    # input variables
    variables : y1, y2, y3, y4 | Message;

    # input guard variables
    variables : message | Message;
    variables : key | Key;

    function : enc | Message Key -> Message;
    function : dec | Message Key -> Message;
    function : pair | Message Message -> Message;
    function : fst | Message -> Message;
    function : snd | Message -> Message;

    public names : a | Message;
    public names : b1, b2, b3, b4 | Bit;
    public names : d | Key;

    private names : tp | Key;

.rewrites

    rewrite : dec(enc(mes, k), k) -> mes;
    rewrite : fst(pair(m1, m2)) -> m1;
    rewrite : snd(pair(m1, m2)) -> m2;

.roles1

    role :  {0} [T] out(1/8 -> enc(pair(zero, pair(zero, zero)), tp) +
                        1/8 -> enc(pair(zero, pair(zero, one)), tp) +
                        1/8 -> enc(pair(zero, pair(one, zero)), tp) +
                        1/8 -> enc(pair(zero, pair(one, one)), tp) +
                        1/8 -> enc(pair(one, pair(one, one)), tp) +
                        1/8 -> enc(pair(one, pair(one, zero)), tp) +
                        1/8 -> enc(pair(one, pair(zero, one)), tp) +
                        1/8 -> enc(pair(one, pair(zero, zero)), tp));

    role :  {1} in(y1{enc(message, tp)}) .
            {1} [ y1 == enc(dec(y1, tp), tp) ] out( 1 -> T) .
            {1} IF [ fst(dec(y1, tp)) == zero ]
                THEN out(1-> pair(plus(fst(snd(dec(y1, tp))), zero),
                                       snd(snd(dec(y1, tp)))))
                ELSE out(1-> pair(     fst(snd(dec(y1, tp))),
                                  plus(snd(snd(dec(y1, tp))), zero)));

    role :  {2} in(y2{enc(message, tp)}) .
            {2} [ y2 == enc(dec(y2, tp), tp) ] out( 1 -> T) .
            {2} IF [ fst(dec(y2, tp)) == zero ]
                THEN out(1-> pair(     fst(snd(dec(y2, tp))),
                                  plus(snd(snd(dec(y2, tp))), one)))
                ELSE out(1-> pair(plus(fst(snd(dec(y2, tp))), one),
                                  snd(snd(dec(y2, tp)))));
.roles2

    role :  {0} [T] out(1/8 -> enc(pair(zero, pair(zero, zero)), tp) +
                        1/8 -> enc(pair(zero, pair(zero, one)), tp) +
                        1/8 -> enc(pair(zero, pair(one, zero)), tp) +
                        1/8 -> enc(pair(zero, pair(one, one)), tp) +
                        1/8 -> enc(pair(one, pair(one, one)), tp) +
                        1/8 -> enc(pair(one, pair(one, zero)), tp) +
                        1/8 -> enc(pair(one, pair(zero, one)), tp) +
                        1/8 -> enc(pair(one, pair(zero, zero)), tp));

    role :  {1} in(y1{enc(message, tp)}) .
            {1} [ y1 == enc(dec(y1, tp), tp) ] out( 1 -> T) .
            {1} IF [ fst(dec(y1, tp)) == zero ]
                THEN out(1-> pair(plus(fst(snd(dec(y1, tp))), one),
                             snd(snd(dec(y1, tp)))))
                ELSE out(1-> pair(     fst(snd(dec(y1, tp))),
                             plus(snd(snd(dec(y1, tp))), one)));

    role :  {2} in(y2{enc(message, tp)}) .
            {2} [ y2 == enc(dec(y2, tp), tp) ] out( 1 -> T) .
            {2} IF [ fst(dec(y2, tp)) == zero ]
            THEN out(1-> pair(     fst(snd(dec(y2, tp))),
                              plus(snd(snd(dec(y2, tp))), zero)))
            ELSE out(1-> pair(plus(fst(snd(dec(y2, tp))), zero),
                                   snd(snd(dec(y2, tp)))));